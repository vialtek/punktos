#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# host operating system
readonly HOST_OS=$(uname -s)

# host architecture
HOST_OS_ARCH=$(uname -m)
case $HOST_OS_ARCH in
  aarch64*|arm64)
    # flatten either aarch64 or arm64 to arm64 to keep it simple
    readonly HOST_ARCH="arm64"
    ;;
  *)
    readonly HOST_ARCH
    ;;
esac

#echo HOST_OS = $HOST_OS
#echo HOST_OS_ARCH = $HOST_OS_ARCH

function HELP {
    echo "help:"
    echo "-3                : 32bit arm"
    echo "-m <memory in MB>"
    echo "-s <number of cpus>"
    echo
    echo "-d <disk image>   : a virtio disk device"
    echo "-n                : a virtio network device"
    echo "-t                : a virtio tap network device"
    echo "-g                : a virtio display"
    echo
    echo "-h for help"
    echo "all arguments after -- are passed to qemu directly"
    exit 1
}

DO_NET=0
DO_NET_TAP=0
DO_DISK=0
DO_DISK_IMAGE=""
DO_64BIT=1
DO_DISPLAY=0
SMP=1
MEMSIZE=512
SUDO=""
PROJECT=""

while getopts cd:ghkm:Mnt36vp:s:f: FLAG; do
    case $FLAG in
        d) DO_DISK=1; DISK_IMAGE=$OPTARG;;
        g) DO_DISPLAY=1;;
        n) DO_NET=1;;
        t) DO_NET_TAP=1;;
        3) DO_64BIT=0;;
        v) DO_VIRT=1;;
        m) MEMSIZE=$OPTARG;;
        s) SMP=$OPTARG;;
        p) PROJECT=$OPTARG;;
        h) HELP;;
        \?)
            echo unrecognized option
            HELP
    esac
done

shift $((OPTIND-1))

# pick the appropriate qemu and project
if [ $DO_64BIT == 1 ]; then
    QEMU="qemu-system-aarch64"
    CPU="cortex-a53"
    MACHINE="virt"
    _PROJECT="qemu-virt-arm64"
else
    QEMU="qemu-system-arm"
    CPU="cortex-a15"
    MACHINE="virt"
    MACHINE+=",highmem=off" # disable the high PCI ECAM, since we dont support LPAE to map it
    _PROJECT="qemu-virt-arm32"
fi

# allow overriding the project from the environment
if [ "$PROJECT" == "" ]; then
    PROJECT=$_PROJECT
fi

ARGS=" -cpu $CPU -m $MEMSIZE -smp $SMP -machine $MACHINE -kernel build-${PROJECT}/lk.elf"

if (( $DO_DISK )); then
    ARGS+=" -drive if=none,file=${DISK_IMAGE},id=blk,format=raw"
    ARGS+=" -device virtio-blk-device,drive=blk"
fi

if (( $DO_NET )); then
    ARGS+=" -netdev user,id=vmnic,hostname=qemu "
    ARGS+=" -device virtio-net-device,netdev=vmnic"
elif (( $DO_NET_TAP )); then
    # quick note to enable tap interface
    # IFNAME=qemu0
    # BRIDGE=bridge0
    # sudo tunctl -u $(whoami) -t ${IFNAME}
    # sudo ifconfig ${IFNAME} up
    # sudo ip link set ${IFNAME} master ${BRIDGE}
    ARGS+=" -netdev tap,id=vmnic,ifname=qemu0,script=no,downscript=no"
    ARGS+=" -device virtio-net-device,netdev=vmnic"
    #SUDO="sudo "
else
    NO_NET_ARGS=" -net none"
    ARGS+=$NO_NET_ARGS
fi

if (( $DO_DISPLAY )); then
    ARGS+=" -device virtio-gpu-device -serial stdio"
    ARGS+=" -device virtio-keyboard-device"
    ARGS+=" -device virtio-mouse-device"
else
    ARGS+=" -nographic"
fi

MAKE_VARS=""

$DIR/make-parallel $MAKE_VARS $PROJECT &&
echo $SUDO $QEMU $ARGS $@ &&
$SUDO $QEMU $ARGS $@
